// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ipc.proto

/*
Package ipcpb is a generated protocol buffer package.

It is generated from these files:
	ipc.proto

It has these top-level messages:
	Benchmark
*/
package ipcpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Benchmark struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Benchmark) Reset()                    { *m = Benchmark{} }
func (m *Benchmark) String() string            { return proto.CompactTextString(m) }
func (*Benchmark) ProtoMessage()               {}
func (*Benchmark) Descriptor() ([]byte, []int) { return fileDescriptorIpc, []int{0} }

func (m *Benchmark) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Benchmark)(nil), "ipcpb.Benchmark")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BenchmarkService service

type BenchmarkServiceClient interface {
	Transfer(ctx context.Context, in *Benchmark, opts ...grpc.CallOption) (*Benchmark, error)
}

type benchmarkServiceClient struct {
	cc *grpc.ClientConn
}

func NewBenchmarkServiceClient(cc *grpc.ClientConn) BenchmarkServiceClient {
	return &benchmarkServiceClient{cc}
}

func (c *benchmarkServiceClient) Transfer(ctx context.Context, in *Benchmark, opts ...grpc.CallOption) (*Benchmark, error) {
	out := new(Benchmark)
	err := grpc.Invoke(ctx, "/ipcpb.BenchmarkService/transfer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BenchmarkService service

type BenchmarkServiceServer interface {
	Transfer(context.Context, *Benchmark) (*Benchmark, error)
}

func RegisterBenchmarkServiceServer(s *grpc.Server, srv BenchmarkServiceServer) {
	s.RegisterService(&_BenchmarkService_serviceDesc, srv)
}

func _BenchmarkService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Benchmark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipcpb.BenchmarkService/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).Transfer(ctx, req.(*Benchmark))
	}
	return interceptor(ctx, in, info, handler)
}

var _BenchmarkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ipcpb.BenchmarkService",
	HandlerType: (*BenchmarkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "transfer",
			Handler:    _BenchmarkService_Transfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipc.proto",
}

func init() { proto.RegisterFile("ipc.proto", fileDescriptorIpc) }

var fileDescriptorIpc = []byte{
	// 113 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0x2c, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0x2c, 0x48, 0x2e, 0x48, 0x52, 0x92, 0xe7, 0xe2,
	0x74, 0x4a, 0xcd, 0x4b, 0xce, 0xc8, 0x4d, 0x2c, 0xca, 0x16, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c,
	0x49, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0xb3, 0x8d, 0x9c, 0xb8, 0x04, 0xe0, 0x0a,
	0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0xf4, 0xb8, 0x38, 0x4a, 0x8a, 0x12, 0xf3, 0x8a,
	0xd3, 0x52, 0x8b, 0x84, 0x04, 0xf4, 0xc0, 0x06, 0xe9, 0xc1, 0x15, 0x49, 0x61, 0x88, 0x24, 0xb1,
	0x81, 0xad, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x3e, 0xad, 0x8c, 0x66, 0x7f, 0x00, 0x00,
	0x00,
}
