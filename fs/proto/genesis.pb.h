// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genesis.proto

#ifndef PROTOBUF_INCLUDED_genesis_2eproto
#define PROTOBUF_INCLUDED_genesis_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_genesis_2eproto 

namespace protobuf_genesis_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_genesis_2eproto
namespace corepb {
class Genesis;
class GenesisDefaultTypeInternal;
extern GenesisDefaultTypeInternal _Genesis_default_instance_;
class GenesisConsensus;
class GenesisConsensusDefaultTypeInternal;
extern GenesisConsensusDefaultTypeInternal _GenesisConsensus_default_instance_;
class GenesisConsensusDpos;
class GenesisConsensusDposDefaultTypeInternal;
extern GenesisConsensusDposDefaultTypeInternal _GenesisConsensusDpos_default_instance_;
class GenesisMeta;
class GenesisMetaDefaultTypeInternal;
extern GenesisMetaDefaultTypeInternal _GenesisMeta_default_instance_;
class GenesisTokenDistribution;
class GenesisTokenDistributionDefaultTypeInternal;
extern GenesisTokenDistributionDefaultTypeInternal _GenesisTokenDistribution_default_instance_;
}  // namespace corepb
namespace google {
namespace protobuf {
template<> ::corepb::Genesis* Arena::CreateMaybeMessage<::corepb::Genesis>(Arena*);
template<> ::corepb::GenesisConsensus* Arena::CreateMaybeMessage<::corepb::GenesisConsensus>(Arena*);
template<> ::corepb::GenesisConsensusDpos* Arena::CreateMaybeMessage<::corepb::GenesisConsensusDpos>(Arena*);
template<> ::corepb::GenesisMeta* Arena::CreateMaybeMessage<::corepb::GenesisMeta>(Arena*);
template<> ::corepb::GenesisTokenDistribution* Arena::CreateMaybeMessage<::corepb::GenesisTokenDistribution>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace corepb {

// ===================================================================

class Genesis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corepb.Genesis) */ {
 public:
  Genesis();
  virtual ~Genesis();

  Genesis(const Genesis& from);

  inline Genesis& operator=(const Genesis& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Genesis(Genesis&& from) noexcept
    : Genesis() {
    *this = ::std::move(from);
  }

  inline Genesis& operator=(Genesis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Genesis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Genesis* internal_default_instance() {
    return reinterpret_cast<const Genesis*>(
               &_Genesis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Genesis* other);
  friend void swap(Genesis& a, Genesis& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Genesis* New() const final {
    return CreateMaybeMessage<Genesis>(NULL);
  }

  Genesis* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Genesis>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Genesis& from);
  void MergeFrom(const Genesis& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Genesis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .corepb.GenesisTokenDistribution token_distribution = 3;
  int token_distribution_size() const;
  void clear_token_distribution();
  static const int kTokenDistributionFieldNumber = 3;
  ::corepb::GenesisTokenDistribution* mutable_token_distribution(int index);
  ::google::protobuf::RepeatedPtrField< ::corepb::GenesisTokenDistribution >*
      mutable_token_distribution();
  const ::corepb::GenesisTokenDistribution& token_distribution(int index) const;
  ::corepb::GenesisTokenDistribution* add_token_distribution();
  const ::google::protobuf::RepeatedPtrField< ::corepb::GenesisTokenDistribution >&
      token_distribution() const;

  // .corepb.GenesisMeta meta = 1;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  private:
  const ::corepb::GenesisMeta& _internal_meta() const;
  public:
  const ::corepb::GenesisMeta& meta() const;
  ::corepb::GenesisMeta* release_meta();
  ::corepb::GenesisMeta* mutable_meta();
  void set_allocated_meta(::corepb::GenesisMeta* meta);

  // .corepb.GenesisConsensus consensus = 2;
  bool has_consensus() const;
  void clear_consensus();
  static const int kConsensusFieldNumber = 2;
  private:
  const ::corepb::GenesisConsensus& _internal_consensus() const;
  public:
  const ::corepb::GenesisConsensus& consensus() const;
  ::corepb::GenesisConsensus* release_consensus();
  ::corepb::GenesisConsensus* mutable_consensus();
  void set_allocated_consensus(::corepb::GenesisConsensus* consensus);

  // @@protoc_insertion_point(class_scope:corepb.Genesis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::corepb::GenesisTokenDistribution > token_distribution_;
  ::corepb::GenesisMeta* meta_;
  ::corepb::GenesisConsensus* consensus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_genesis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GenesisMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corepb.GenesisMeta) */ {
 public:
  GenesisMeta();
  virtual ~GenesisMeta();

  GenesisMeta(const GenesisMeta& from);

  inline GenesisMeta& operator=(const GenesisMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GenesisMeta(GenesisMeta&& from) noexcept
    : GenesisMeta() {
    *this = ::std::move(from);
  }

  inline GenesisMeta& operator=(GenesisMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenesisMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenesisMeta* internal_default_instance() {
    return reinterpret_cast<const GenesisMeta*>(
               &_GenesisMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GenesisMeta* other);
  friend void swap(GenesisMeta& a, GenesisMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GenesisMeta* New() const final {
    return CreateMaybeMessage<GenesisMeta>(NULL);
  }

  GenesisMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GenesisMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GenesisMeta& from);
  void MergeFrom(const GenesisMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 chain_id = 1;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 1;
  ::google::protobuf::uint32 chain_id() const;
  void set_chain_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:corepb.GenesisMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 chain_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_genesis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GenesisConsensus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corepb.GenesisConsensus) */ {
 public:
  GenesisConsensus();
  virtual ~GenesisConsensus();

  GenesisConsensus(const GenesisConsensus& from);

  inline GenesisConsensus& operator=(const GenesisConsensus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GenesisConsensus(GenesisConsensus&& from) noexcept
    : GenesisConsensus() {
    *this = ::std::move(from);
  }

  inline GenesisConsensus& operator=(GenesisConsensus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenesisConsensus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenesisConsensus* internal_default_instance() {
    return reinterpret_cast<const GenesisConsensus*>(
               &_GenesisConsensus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GenesisConsensus* other);
  friend void swap(GenesisConsensus& a, GenesisConsensus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GenesisConsensus* New() const final {
    return CreateMaybeMessage<GenesisConsensus>(NULL);
  }

  GenesisConsensus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GenesisConsensus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GenesisConsensus& from);
  void MergeFrom(const GenesisConsensus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisConsensus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .corepb.GenesisConsensusDpos dpos = 1;
  bool has_dpos() const;
  void clear_dpos();
  static const int kDposFieldNumber = 1;
  private:
  const ::corepb::GenesisConsensusDpos& _internal_dpos() const;
  public:
  const ::corepb::GenesisConsensusDpos& dpos() const;
  ::corepb::GenesisConsensusDpos* release_dpos();
  ::corepb::GenesisConsensusDpos* mutable_dpos();
  void set_allocated_dpos(::corepb::GenesisConsensusDpos* dpos);

  // @@protoc_insertion_point(class_scope:corepb.GenesisConsensus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::corepb::GenesisConsensusDpos* dpos_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_genesis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GenesisConsensusDpos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corepb.GenesisConsensusDpos) */ {
 public:
  GenesisConsensusDpos();
  virtual ~GenesisConsensusDpos();

  GenesisConsensusDpos(const GenesisConsensusDpos& from);

  inline GenesisConsensusDpos& operator=(const GenesisConsensusDpos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GenesisConsensusDpos(GenesisConsensusDpos&& from) noexcept
    : GenesisConsensusDpos() {
    *this = ::std::move(from);
  }

  inline GenesisConsensusDpos& operator=(GenesisConsensusDpos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenesisConsensusDpos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenesisConsensusDpos* internal_default_instance() {
    return reinterpret_cast<const GenesisConsensusDpos*>(
               &_GenesisConsensusDpos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GenesisConsensusDpos* other);
  friend void swap(GenesisConsensusDpos& a, GenesisConsensusDpos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GenesisConsensusDpos* New() const final {
    return CreateMaybeMessage<GenesisConsensusDpos>(NULL);
  }

  GenesisConsensusDpos* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GenesisConsensusDpos>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GenesisConsensusDpos& from);
  void MergeFrom(const GenesisConsensusDpos& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisConsensusDpos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string dynasty = 1;
  int dynasty_size() const;
  void clear_dynasty();
  static const int kDynastyFieldNumber = 1;
  const ::std::string& dynasty(int index) const;
  ::std::string* mutable_dynasty(int index);
  void set_dynasty(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_dynasty(int index, ::std::string&& value);
  #endif
  void set_dynasty(int index, const char* value);
  void set_dynasty(int index, const char* value, size_t size);
  ::std::string* add_dynasty();
  void add_dynasty(const ::std::string& value);
  #if LANG_CXX11
  void add_dynasty(::std::string&& value);
  #endif
  void add_dynasty(const char* value);
  void add_dynasty(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& dynasty() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dynasty();

  // @@protoc_insertion_point(class_scope:corepb.GenesisConsensusDpos)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dynasty_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_genesis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GenesisTokenDistribution : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corepb.GenesisTokenDistribution) */ {
 public:
  GenesisTokenDistribution();
  virtual ~GenesisTokenDistribution();

  GenesisTokenDistribution(const GenesisTokenDistribution& from);

  inline GenesisTokenDistribution& operator=(const GenesisTokenDistribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GenesisTokenDistribution(GenesisTokenDistribution&& from) noexcept
    : GenesisTokenDistribution() {
    *this = ::std::move(from);
  }

  inline GenesisTokenDistribution& operator=(GenesisTokenDistribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenesisTokenDistribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenesisTokenDistribution* internal_default_instance() {
    return reinterpret_cast<const GenesisTokenDistribution*>(
               &_GenesisTokenDistribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GenesisTokenDistribution* other);
  friend void swap(GenesisTokenDistribution& a, GenesisTokenDistribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GenesisTokenDistribution* New() const final {
    return CreateMaybeMessage<GenesisTokenDistribution>(NULL);
  }

  GenesisTokenDistribution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GenesisTokenDistribution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GenesisTokenDistribution& from);
  void MergeFrom(const GenesisTokenDistribution& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisTokenDistribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:corepb.GenesisTokenDistribution)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_genesis_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Genesis

// .corepb.GenesisMeta meta = 1;
inline bool Genesis::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline void Genesis::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
}
inline const ::corepb::GenesisMeta& Genesis::_internal_meta() const {
  return *meta_;
}
inline const ::corepb::GenesisMeta& Genesis::meta() const {
  const ::corepb::GenesisMeta* p = meta_;
  // @@protoc_insertion_point(field_get:corepb.Genesis.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::corepb::GenesisMeta*>(
      &::corepb::_GenesisMeta_default_instance_);
}
inline ::corepb::GenesisMeta* Genesis::release_meta() {
  // @@protoc_insertion_point(field_release:corepb.Genesis.meta)
  
  ::corepb::GenesisMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline ::corepb::GenesisMeta* Genesis::mutable_meta() {
  
  if (meta_ == NULL) {
    auto* p = CreateMaybeMessage<::corepb::GenesisMeta>(GetArenaNoVirtual());
    meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:corepb.Genesis.meta)
  return meta_;
}
inline void Genesis::set_allocated_meta(::corepb::GenesisMeta* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete meta_;
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:corepb.Genesis.meta)
}

// .corepb.GenesisConsensus consensus = 2;
inline bool Genesis::has_consensus() const {
  return this != internal_default_instance() && consensus_ != NULL;
}
inline void Genesis::clear_consensus() {
  if (GetArenaNoVirtual() == NULL && consensus_ != NULL) {
    delete consensus_;
  }
  consensus_ = NULL;
}
inline const ::corepb::GenesisConsensus& Genesis::_internal_consensus() const {
  return *consensus_;
}
inline const ::corepb::GenesisConsensus& Genesis::consensus() const {
  const ::corepb::GenesisConsensus* p = consensus_;
  // @@protoc_insertion_point(field_get:corepb.Genesis.consensus)
  return p != NULL ? *p : *reinterpret_cast<const ::corepb::GenesisConsensus*>(
      &::corepb::_GenesisConsensus_default_instance_);
}
inline ::corepb::GenesisConsensus* Genesis::release_consensus() {
  // @@protoc_insertion_point(field_release:corepb.Genesis.consensus)
  
  ::corepb::GenesisConsensus* temp = consensus_;
  consensus_ = NULL;
  return temp;
}
inline ::corepb::GenesisConsensus* Genesis::mutable_consensus() {
  
  if (consensus_ == NULL) {
    auto* p = CreateMaybeMessage<::corepb::GenesisConsensus>(GetArenaNoVirtual());
    consensus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:corepb.Genesis.consensus)
  return consensus_;
}
inline void Genesis::set_allocated_consensus(::corepb::GenesisConsensus* consensus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete consensus_;
  }
  if (consensus) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      consensus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, consensus, submessage_arena);
    }
    
  } else {
    
  }
  consensus_ = consensus;
  // @@protoc_insertion_point(field_set_allocated:corepb.Genesis.consensus)
}

// repeated .corepb.GenesisTokenDistribution token_distribution = 3;
inline int Genesis::token_distribution_size() const {
  return token_distribution_.size();
}
inline void Genesis::clear_token_distribution() {
  token_distribution_.Clear();
}
inline ::corepb::GenesisTokenDistribution* Genesis::mutable_token_distribution(int index) {
  // @@protoc_insertion_point(field_mutable:corepb.Genesis.token_distribution)
  return token_distribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::corepb::GenesisTokenDistribution >*
Genesis::mutable_token_distribution() {
  // @@protoc_insertion_point(field_mutable_list:corepb.Genesis.token_distribution)
  return &token_distribution_;
}
inline const ::corepb::GenesisTokenDistribution& Genesis::token_distribution(int index) const {
  // @@protoc_insertion_point(field_get:corepb.Genesis.token_distribution)
  return token_distribution_.Get(index);
}
inline ::corepb::GenesisTokenDistribution* Genesis::add_token_distribution() {
  // @@protoc_insertion_point(field_add:corepb.Genesis.token_distribution)
  return token_distribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::corepb::GenesisTokenDistribution >&
Genesis::token_distribution() const {
  // @@protoc_insertion_point(field_list:corepb.Genesis.token_distribution)
  return token_distribution_;
}

// -------------------------------------------------------------------

// GenesisMeta

// uint32 chain_id = 1;
inline void GenesisMeta::clear_chain_id() {
  chain_id_ = 0u;
}
inline ::google::protobuf::uint32 GenesisMeta::chain_id() const {
  // @@protoc_insertion_point(field_get:corepb.GenesisMeta.chain_id)
  return chain_id_;
}
inline void GenesisMeta::set_chain_id(::google::protobuf::uint32 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:corepb.GenesisMeta.chain_id)
}

// -------------------------------------------------------------------

// GenesisConsensus

// .corepb.GenesisConsensusDpos dpos = 1;
inline bool GenesisConsensus::has_dpos() const {
  return this != internal_default_instance() && dpos_ != NULL;
}
inline void GenesisConsensus::clear_dpos() {
  if (GetArenaNoVirtual() == NULL && dpos_ != NULL) {
    delete dpos_;
  }
  dpos_ = NULL;
}
inline const ::corepb::GenesisConsensusDpos& GenesisConsensus::_internal_dpos() const {
  return *dpos_;
}
inline const ::corepb::GenesisConsensusDpos& GenesisConsensus::dpos() const {
  const ::corepb::GenesisConsensusDpos* p = dpos_;
  // @@protoc_insertion_point(field_get:corepb.GenesisConsensus.dpos)
  return p != NULL ? *p : *reinterpret_cast<const ::corepb::GenesisConsensusDpos*>(
      &::corepb::_GenesisConsensusDpos_default_instance_);
}
inline ::corepb::GenesisConsensusDpos* GenesisConsensus::release_dpos() {
  // @@protoc_insertion_point(field_release:corepb.GenesisConsensus.dpos)
  
  ::corepb::GenesisConsensusDpos* temp = dpos_;
  dpos_ = NULL;
  return temp;
}
inline ::corepb::GenesisConsensusDpos* GenesisConsensus::mutable_dpos() {
  
  if (dpos_ == NULL) {
    auto* p = CreateMaybeMessage<::corepb::GenesisConsensusDpos>(GetArenaNoVirtual());
    dpos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:corepb.GenesisConsensus.dpos)
  return dpos_;
}
inline void GenesisConsensus::set_allocated_dpos(::corepb::GenesisConsensusDpos* dpos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dpos_;
  }
  if (dpos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dpos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dpos, submessage_arena);
    }
    
  } else {
    
  }
  dpos_ = dpos;
  // @@protoc_insertion_point(field_set_allocated:corepb.GenesisConsensus.dpos)
}

// -------------------------------------------------------------------

// GenesisConsensusDpos

// repeated string dynasty = 1;
inline int GenesisConsensusDpos::dynasty_size() const {
  return dynasty_.size();
}
inline void GenesisConsensusDpos::clear_dynasty() {
  dynasty_.Clear();
}
inline const ::std::string& GenesisConsensusDpos::dynasty(int index) const {
  // @@protoc_insertion_point(field_get:corepb.GenesisConsensusDpos.dynasty)
  return dynasty_.Get(index);
}
inline ::std::string* GenesisConsensusDpos::mutable_dynasty(int index) {
  // @@protoc_insertion_point(field_mutable:corepb.GenesisConsensusDpos.dynasty)
  return dynasty_.Mutable(index);
}
inline void GenesisConsensusDpos::set_dynasty(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:corepb.GenesisConsensusDpos.dynasty)
  dynasty_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GenesisConsensusDpos::set_dynasty(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:corepb.GenesisConsensusDpos.dynasty)
  dynasty_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GenesisConsensusDpos::set_dynasty(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dynasty_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:corepb.GenesisConsensusDpos.dynasty)
}
inline void GenesisConsensusDpos::set_dynasty(int index, const char* value, size_t size) {
  dynasty_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:corepb.GenesisConsensusDpos.dynasty)
}
inline ::std::string* GenesisConsensusDpos::add_dynasty() {
  // @@protoc_insertion_point(field_add_mutable:corepb.GenesisConsensusDpos.dynasty)
  return dynasty_.Add();
}
inline void GenesisConsensusDpos::add_dynasty(const ::std::string& value) {
  dynasty_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:corepb.GenesisConsensusDpos.dynasty)
}
#if LANG_CXX11
inline void GenesisConsensusDpos::add_dynasty(::std::string&& value) {
  dynasty_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:corepb.GenesisConsensusDpos.dynasty)
}
#endif
inline void GenesisConsensusDpos::add_dynasty(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dynasty_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:corepb.GenesisConsensusDpos.dynasty)
}
inline void GenesisConsensusDpos::add_dynasty(const char* value, size_t size) {
  dynasty_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:corepb.GenesisConsensusDpos.dynasty)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GenesisConsensusDpos::dynasty() const {
  // @@protoc_insertion_point(field_list:corepb.GenesisConsensusDpos.dynasty)
  return dynasty_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GenesisConsensusDpos::mutable_dynasty() {
  // @@protoc_insertion_point(field_mutable_list:corepb.GenesisConsensusDpos.dynasty)
  return &dynasty_;
}

// -------------------------------------------------------------------

// GenesisTokenDistribution

// string address = 1;
inline void GenesisTokenDistribution::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenesisTokenDistribution::address() const {
  // @@protoc_insertion_point(field_get:corepb.GenesisTokenDistribution.address)
  return address_.GetNoArena();
}
inline void GenesisTokenDistribution::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.GenesisTokenDistribution.address)
}
#if LANG_CXX11
inline void GenesisTokenDistribution::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.GenesisTokenDistribution.address)
}
#endif
inline void GenesisTokenDistribution::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.GenesisTokenDistribution.address)
}
inline void GenesisTokenDistribution::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.GenesisTokenDistribution.address)
}
inline ::std::string* GenesisTokenDistribution::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:corepb.GenesisTokenDistribution.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenesisTokenDistribution::release_address() {
  // @@protoc_insertion_point(field_release:corepb.GenesisTokenDistribution.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenesisTokenDistribution::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:corepb.GenesisTokenDistribution.address)
}

// string value = 2;
inline void GenesisTokenDistribution::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GenesisTokenDistribution::value() const {
  // @@protoc_insertion_point(field_get:corepb.GenesisTokenDistribution.value)
  return value_.GetNoArena();
}
inline void GenesisTokenDistribution::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.GenesisTokenDistribution.value)
}
#if LANG_CXX11
inline void GenesisTokenDistribution::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.GenesisTokenDistribution.value)
}
#endif
inline void GenesisTokenDistribution::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.GenesisTokenDistribution.value)
}
inline void GenesisTokenDistribution::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.GenesisTokenDistribution.value)
}
inline ::std::string* GenesisTokenDistribution::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:corepb.GenesisTokenDistribution.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GenesisTokenDistribution::release_value() {
  // @@protoc_insertion_point(field_release:corepb.GenesisTokenDistribution.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GenesisTokenDistribution::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:corepb.GenesisTokenDistribution.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace corepb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_genesis_2eproto
