// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#ifndef PROTOBUF_INCLUDED_block_2eproto
#define PROTOBUF_INCLUDED_block_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "dag.pb.h"
#include "state.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto 

namespace protobuf_block_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_block_2eproto
namespace corepb {
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class BlockHeader;
class BlockHeaderDefaultTypeInternal;
extern BlockHeaderDefaultTypeInternal _BlockHeader_default_instance_;
class ContractMeta;
class ContractMetaDefaultTypeInternal;
extern ContractMetaDefaultTypeInternal _ContractMeta_default_instance_;
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class DownloadBlock;
class DownloadBlockDefaultTypeInternal;
extern DownloadBlockDefaultTypeInternal _DownloadBlock_default_instance_;
class NetBlock;
class NetBlockDefaultTypeInternal;
extern NetBlockDefaultTypeInternal _NetBlock_default_instance_;
class NetBlocks;
class NetBlocksDefaultTypeInternal;
extern NetBlocksDefaultTypeInternal _NetBlocks_default_instance_;
class Random;
class RandomDefaultTypeInternal;
extern RandomDefaultTypeInternal _Random_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
}  // namespace corepb
namespace google {
namespace protobuf {
template<> ::corepb::Account* Arena::CreateMaybeMessage<::corepb::Account>(Arena*);
template<> ::corepb::Block* Arena::CreateMaybeMessage<::corepb::Block>(Arena*);
template<> ::corepb::BlockHeader* Arena::CreateMaybeMessage<::corepb::BlockHeader>(Arena*);
template<> ::corepb::ContractMeta* Arena::CreateMaybeMessage<::corepb::ContractMeta>(Arena*);
template<> ::corepb::Data* Arena::CreateMaybeMessage<::corepb::Data>(Arena*);
template<> ::corepb::DownloadBlock* Arena::CreateMaybeMessage<::corepb::DownloadBlock>(Arena*);
template<> ::corepb::NetBlock* Arena::CreateMaybeMessage<::corepb::NetBlock>(Arena*);
template<> ::corepb::NetBlocks* Arena::CreateMaybeMessage<::corepb::NetBlocks>(Arena*);
template<> ::corepb::Random* Arena::CreateMaybeMessage<::corepb::Random>(Arena*);
template<> ::corepb::Transaction* Arena::CreateMaybeMessage<::corepb::Transaction>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace corepb {

// ===================================================================

class Account : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corepb.Account) */ {
 public:
  Account();
  virtual ~Account();

  Account(const Account& from);

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(Account&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Account* other);
  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(NULL);
  }

  Account* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // bytes balance = 2;
  void clear_balance();
  static const int kBalanceFieldNumber = 2;
  const ::std::string& balance() const;
  void set_balance(const ::std::string& value);
  #if LANG_CXX11
  void set_balance(::std::string&& value);
  #endif
  void set_balance(const char* value);
  void set_balance(const void* value, size_t size);
  ::std::string* mutable_balance();
  ::std::string* release_balance();
  void set_allocated_balance(::std::string* balance);

  // bytes vars_hash = 4;
  void clear_vars_hash();
  static const int kVarsHashFieldNumber = 4;
  const ::std::string& vars_hash() const;
  void set_vars_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_vars_hash(::std::string&& value);
  #endif
  void set_vars_hash(const char* value);
  void set_vars_hash(const void* value, size_t size);
  ::std::string* mutable_vars_hash();
  ::std::string* release_vars_hash();
  void set_allocated_vars_hash(::std::string* vars_hash);

  // bytes birth_place = 5;
  void clear_birth_place();
  static const int kBirthPlaceFieldNumber = 5;
  const ::std::string& birth_place() const;
  void set_birth_place(const ::std::string& value);
  #if LANG_CXX11
  void set_birth_place(::std::string&& value);
  #endif
  void set_birth_place(const char* value);
  void set_birth_place(const void* value, size_t size);
  ::std::string* mutable_birth_place();
  ::std::string* release_birth_place();
  void set_allocated_birth_place(::std::string* birth_place);

  // .corepb.ContractMeta contract_meta = 6;
  bool has_contract_meta() const;
  void clear_contract_meta();
  static const int kContractMetaFieldNumber = 6;
  private:
  const ::corepb::ContractMeta& _internal_contract_meta() const;
  public:
  const ::corepb::ContractMeta& contract_meta() const;
  ::corepb::ContractMeta* release_contract_meta();
  ::corepb::ContractMeta* mutable_contract_meta();
  void set_allocated_contract_meta(::corepb::ContractMeta* contract_meta);

  // uint64 nonce = 3;
  void clear_nonce();
  static const int kNonceFieldNumber = 3;
  ::google::protobuf::uint64 nonce() const;
  void set_nonce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:corepb.Account)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr balance_;
  ::google::protobuf::internal::ArenaStringPtr vars_hash_;
  ::google::protobuf::internal::ArenaStringPtr birth_place_;
  ::corepb::ContractMeta* contract_meta_;
  ::google::protobuf::uint64 nonce_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContractMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corepb.ContractMeta) */ {
 public:
  ContractMeta();
  virtual ~ContractMeta();

  ContractMeta(const ContractMeta& from);

  inline ContractMeta& operator=(const ContractMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContractMeta(ContractMeta&& from) noexcept
    : ContractMeta() {
    *this = ::std::move(from);
  }

  inline ContractMeta& operator=(ContractMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContractMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractMeta* internal_default_instance() {
    return reinterpret_cast<const ContractMeta*>(
               &_ContractMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ContractMeta* other);
  friend void swap(ContractMeta& a, ContractMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContractMeta* New() const final {
    return CreateMaybeMessage<ContractMeta>(NULL);
  }

  ContractMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContractMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContractMeta& from);
  void MergeFrom(const ContractMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:corepb.ContractMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corepb.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Data* other);
  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(NULL);
  }

  Data* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // bytes payload = 2;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:corepb.Data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transaction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corepb.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Transaction* other);
  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(NULL);
  }

  Transaction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // bytes from = 2;
  void clear_from();
  static const int kFromFieldNumber = 2;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // bytes to = 3;
  void clear_to();
  static const int kToFieldNumber = 3;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // bytes value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // bytes gas_price = 9;
  void clear_gas_price();
  static const int kGasPriceFieldNumber = 9;
  const ::std::string& gas_price() const;
  void set_gas_price(const ::std::string& value);
  #if LANG_CXX11
  void set_gas_price(::std::string&& value);
  #endif
  void set_gas_price(const char* value);
  void set_gas_price(const void* value, size_t size);
  ::std::string* mutable_gas_price();
  ::std::string* release_gas_price();
  void set_allocated_gas_price(::std::string* gas_price);

  // bytes gas_limit = 10;
  void clear_gas_limit();
  static const int kGasLimitFieldNumber = 10;
  const ::std::string& gas_limit() const;
  void set_gas_limit(const ::std::string& value);
  #if LANG_CXX11
  void set_gas_limit(::std::string&& value);
  #endif
  void set_gas_limit(const char* value);
  void set_gas_limit(const void* value, size_t size);
  ::std::string* mutable_gas_limit();
  ::std::string* release_gas_limit();
  void set_allocated_gas_limit(::std::string* gas_limit);

  // bytes sign = 12;
  void clear_sign();
  static const int kSignFieldNumber = 12;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const void* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // .corepb.Data data = 7;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 7;
  private:
  const ::corepb::Data& _internal_data() const;
  public:
  const ::corepb::Data& data() const;
  ::corepb::Data* release_data();
  ::corepb::Data* mutable_data();
  void set_allocated_data(::corepb::Data* data);

  // uint64 nonce = 5;
  void clear_nonce();
  static const int kNonceFieldNumber = 5;
  ::google::protobuf::uint64 nonce() const;
  void set_nonce(::google::protobuf::uint64 value);

  // int64 timestamp = 6;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // uint32 chain_id = 8;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 8;
  ::google::protobuf::uint32 chain_id() const;
  void set_chain_id(::google::protobuf::uint32 value);

  // uint32 alg = 11;
  void clear_alg();
  static const int kAlgFieldNumber = 11;
  ::google::protobuf::uint32 alg() const;
  void set_alg(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:corepb.Transaction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr gas_price_;
  ::google::protobuf::internal::ArenaStringPtr gas_limit_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  ::corepb::Data* data_;
  ::google::protobuf::uint64 nonce_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::uint32 chain_id_;
  ::google::protobuf::uint32 alg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlockHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corepb.BlockHeader) */ {
 public:
  BlockHeader();
  virtual ~BlockHeader();

  BlockHeader(const BlockHeader& from);

  inline BlockHeader& operator=(const BlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockHeader(BlockHeader&& from) noexcept
    : BlockHeader() {
    *this = ::std::move(from);
  }

  inline BlockHeader& operator=(BlockHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockHeader* internal_default_instance() {
    return reinterpret_cast<const BlockHeader*>(
               &_BlockHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(BlockHeader* other);
  friend void swap(BlockHeader& a, BlockHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockHeader* New() const final {
    return CreateMaybeMessage<BlockHeader>(NULL);
  }

  BlockHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlockHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlockHeader& from);
  void MergeFrom(const BlockHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // bytes parent_hash = 2;
  void clear_parent_hash();
  static const int kParentHashFieldNumber = 2;
  const ::std::string& parent_hash() const;
  void set_parent_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_hash(::std::string&& value);
  #endif
  void set_parent_hash(const char* value);
  void set_parent_hash(const void* value, size_t size);
  ::std::string* mutable_parent_hash();
  ::std::string* release_parent_hash();
  void set_allocated_parent_hash(::std::string* parent_hash);

  // bytes coinbase = 4;
  void clear_coinbase();
  static const int kCoinbaseFieldNumber = 4;
  const ::std::string& coinbase() const;
  void set_coinbase(const ::std::string& value);
  #if LANG_CXX11
  void set_coinbase(::std::string&& value);
  #endif
  void set_coinbase(const char* value);
  void set_coinbase(const void* value, size_t size);
  ::std::string* mutable_coinbase();
  ::std::string* release_coinbase();
  void set_allocated_coinbase(::std::string* coinbase);

  // bytes sign = 8;
  void clear_sign();
  static const int kSignFieldNumber = 8;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const void* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // bytes state_root = 9;
  void clear_state_root();
  static const int kStateRootFieldNumber = 9;
  const ::std::string& state_root() const;
  void set_state_root(const ::std::string& value);
  #if LANG_CXX11
  void set_state_root(::std::string&& value);
  #endif
  void set_state_root(const char* value);
  void set_state_root(const void* value, size_t size);
  ::std::string* mutable_state_root();
  ::std::string* release_state_root();
  void set_allocated_state_root(::std::string* state_root);

  // bytes txs_root = 10;
  void clear_txs_root();
  static const int kTxsRootFieldNumber = 10;
  const ::std::string& txs_root() const;
  void set_txs_root(const ::std::string& value);
  #if LANG_CXX11
  void set_txs_root(::std::string&& value);
  #endif
  void set_txs_root(const char* value);
  void set_txs_root(const void* value, size_t size);
  ::std::string* mutable_txs_root();
  ::std::string* release_txs_root();
  void set_allocated_txs_root(::std::string* txs_root);

  // bytes events_root = 11;
  void clear_events_root();
  static const int kEventsRootFieldNumber = 11;
  const ::std::string& events_root() const;
  void set_events_root(const ::std::string& value);
  #if LANG_CXX11
  void set_events_root(::std::string&& value);
  #endif
  void set_events_root(const char* value);
  void set_events_root(const void* value, size_t size);
  ::std::string* mutable_events_root();
  ::std::string* release_events_root();
  void set_allocated_events_root(::std::string* events_root);

  // .consensuspb.ConsensusRoot consensus_root = 12;
  bool has_consensus_root() const;
  void clear_consensus_root();
  static const int kConsensusRootFieldNumber = 12;
  private:
  const ::consensuspb::ConsensusRoot& _internal_consensus_root() const;
  public:
  const ::consensuspb::ConsensusRoot& consensus_root() const;
  ::consensuspb::ConsensusRoot* release_consensus_root();
  ::consensuspb::ConsensusRoot* mutable_consensus_root();
  void set_allocated_consensus_root(::consensuspb::ConsensusRoot* consensus_root);

  // .corepb.Random random = 13;
  bool has_random() const;
  void clear_random();
  static const int kRandomFieldNumber = 13;
  private:
  const ::corepb::Random& _internal_random() const;
  public:
  const ::corepb::Random& random() const;
  ::corepb::Random* release_random();
  ::corepb::Random* mutable_random();
  void set_allocated_random(::corepb::Random* random);

  // int64 timestamp = 5;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // uint32 chain_id = 6;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 6;
  ::google::protobuf::uint32 chain_id() const;
  void set_chain_id(::google::protobuf::uint32 value);

  // uint32 alg = 7;
  void clear_alg();
  static const int kAlgFieldNumber = 7;
  ::google::protobuf::uint32 alg() const;
  void set_alg(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:corepb.BlockHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr parent_hash_;
  ::google::protobuf::internal::ArenaStringPtr coinbase_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  ::google::protobuf::internal::ArenaStringPtr state_root_;
  ::google::protobuf::internal::ArenaStringPtr txs_root_;
  ::google::protobuf::internal::ArenaStringPtr events_root_;
  ::consensuspb::ConsensusRoot* consensus_root_;
  ::corepb::Random* random_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::uint32 chain_id_;
  ::google::protobuf::uint32 alg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corepb.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(NULL);
  }

  Block* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .corepb.Transaction transactions = 2;
  int transactions_size() const;
  void clear_transactions();
  static const int kTransactionsFieldNumber = 2;
  ::corepb::Transaction* mutable_transactions(int index);
  ::google::protobuf::RepeatedPtrField< ::corepb::Transaction >*
      mutable_transactions();
  const ::corepb::Transaction& transactions(int index) const;
  ::corepb::Transaction* add_transactions();
  const ::google::protobuf::RepeatedPtrField< ::corepb::Transaction >&
      transactions() const;

  // .corepb.BlockHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::corepb::BlockHeader& _internal_header() const;
  public:
  const ::corepb::BlockHeader& header() const;
  ::corepb::BlockHeader* release_header();
  ::corepb::BlockHeader* mutable_header();
  void set_allocated_header(::corepb::BlockHeader* header);

  // .dagpb.Dag dependency = 3;
  bool has_dependency() const;
  void clear_dependency();
  static const int kDependencyFieldNumber = 3;
  private:
  const ::dagpb::Dag& _internal_dependency() const;
  public:
  const ::dagpb::Dag& dependency() const;
  ::dagpb::Dag* release_dependency();
  ::dagpb::Dag* mutable_dependency();
  void set_allocated_dependency(::dagpb::Dag* dependency);

  // uint64 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint64 height() const;
  void set_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:corepb.Block)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::corepb::Transaction > transactions_;
  ::corepb::BlockHeader* header_;
  ::dagpb::Dag* dependency_;
  ::google::protobuf::uint64 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetBlocks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corepb.NetBlocks) */ {
 public:
  NetBlocks();
  virtual ~NetBlocks();

  NetBlocks(const NetBlocks& from);

  inline NetBlocks& operator=(const NetBlocks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetBlocks(NetBlocks&& from) noexcept
    : NetBlocks() {
    *this = ::std::move(from);
  }

  inline NetBlocks& operator=(NetBlocks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetBlocks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetBlocks* internal_default_instance() {
    return reinterpret_cast<const NetBlocks*>(
               &_NetBlocks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(NetBlocks* other);
  friend void swap(NetBlocks& a, NetBlocks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetBlocks* New() const final {
    return CreateMaybeMessage<NetBlocks>(NULL);
  }

  NetBlocks* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetBlocks>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetBlocks& from);
  void MergeFrom(const NetBlocks& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetBlocks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .corepb.Block blocks = 3;
  int blocks_size() const;
  void clear_blocks();
  static const int kBlocksFieldNumber = 3;
  ::corepb::Block* mutable_blocks(int index);
  ::google::protobuf::RepeatedPtrField< ::corepb::Block >*
      mutable_blocks();
  const ::corepb::Block& blocks(int index) const;
  ::corepb::Block* add_blocks();
  const ::google::protobuf::RepeatedPtrField< ::corepb::Block >&
      blocks() const;

  // string from = 1;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // uint64 batch = 2;
  void clear_batch();
  static const int kBatchFieldNumber = 2;
  ::google::protobuf::uint64 batch() const;
  void set_batch(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:corepb.NetBlocks)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::corepb::Block > blocks_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::uint64 batch_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corepb.NetBlock) */ {
 public:
  NetBlock();
  virtual ~NetBlock();

  NetBlock(const NetBlock& from);

  inline NetBlock& operator=(const NetBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetBlock(NetBlock&& from) noexcept
    : NetBlock() {
    *this = ::std::move(from);
  }

  inline NetBlock& operator=(NetBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetBlock* internal_default_instance() {
    return reinterpret_cast<const NetBlock*>(
               &_NetBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(NetBlock* other);
  friend void swap(NetBlock& a, NetBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetBlock* New() const final {
    return CreateMaybeMessage<NetBlock>(NULL);
  }

  NetBlock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetBlock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetBlock& from);
  void MergeFrom(const NetBlock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from = 1;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // .corepb.Block block = 3;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 3;
  private:
  const ::corepb::Block& _internal_block() const;
  public:
  const ::corepb::Block& block() const;
  ::corepb::Block* release_block();
  ::corepb::Block* mutable_block();
  void set_allocated_block(::corepb::Block* block);

  // uint64 batch = 2;
  void clear_batch();
  static const int kBatchFieldNumber = 2;
  ::google::protobuf::uint64 batch() const;
  void set_batch(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:corepb.NetBlock)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::corepb::Block* block_;
  ::google::protobuf::uint64 batch_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DownloadBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corepb.DownloadBlock) */ {
 public:
  DownloadBlock();
  virtual ~DownloadBlock();

  DownloadBlock(const DownloadBlock& from);

  inline DownloadBlock& operator=(const DownloadBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DownloadBlock(DownloadBlock&& from) noexcept
    : DownloadBlock() {
    *this = ::std::move(from);
  }

  inline DownloadBlock& operator=(DownloadBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadBlock* internal_default_instance() {
    return reinterpret_cast<const DownloadBlock*>(
               &_DownloadBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DownloadBlock* other);
  friend void swap(DownloadBlock& a, DownloadBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DownloadBlock* New() const final {
    return CreateMaybeMessage<DownloadBlock>(NULL);
  }

  DownloadBlock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DownloadBlock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DownloadBlock& from);
  void MergeFrom(const DownloadBlock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // bytes sign = 2;
  void clear_sign();
  static const int kSignFieldNumber = 2;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const void* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:corepb.DownloadBlock)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Random : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corepb.Random) */ {
 public:
  Random();
  virtual ~Random();

  Random(const Random& from);

  inline Random& operator=(const Random& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Random(Random&& from) noexcept
    : Random() {
    *this = ::std::move(from);
  }

  inline Random& operator=(Random&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Random& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Random* internal_default_instance() {
    return reinterpret_cast<const Random*>(
               &_Random_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Random* other);
  friend void swap(Random& a, Random& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Random* New() const final {
    return CreateMaybeMessage<Random>(NULL);
  }

  Random* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Random>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Random& from);
  void MergeFrom(const Random& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Random* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes vrf_seed = 1;
  void clear_vrf_seed();
  static const int kVrfSeedFieldNumber = 1;
  const ::std::string& vrf_seed() const;
  void set_vrf_seed(const ::std::string& value);
  #if LANG_CXX11
  void set_vrf_seed(::std::string&& value);
  #endif
  void set_vrf_seed(const char* value);
  void set_vrf_seed(const void* value, size_t size);
  ::std::string* mutable_vrf_seed();
  ::std::string* release_vrf_seed();
  void set_allocated_vrf_seed(::std::string* vrf_seed);

  // bytes vrf_proof = 2;
  void clear_vrf_proof();
  static const int kVrfProofFieldNumber = 2;
  const ::std::string& vrf_proof() const;
  void set_vrf_proof(const ::std::string& value);
  #if LANG_CXX11
  void set_vrf_proof(::std::string&& value);
  #endif
  void set_vrf_proof(const char* value);
  void set_vrf_proof(const void* value, size_t size);
  ::std::string* mutable_vrf_proof();
  ::std::string* release_vrf_proof();
  void set_allocated_vrf_proof(::std::string* vrf_proof);

  // @@protoc_insertion_point(class_scope:corepb.Random)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vrf_seed_;
  ::google::protobuf::internal::ArenaStringPtr vrf_proof_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Account

// bytes address = 1;
inline void Account::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::address() const {
  // @@protoc_insertion_point(field_get:corepb.Account.address)
  return address_.GetNoArena();
}
inline void Account::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Account.address)
}
#if LANG_CXX11
inline void Account::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Account.address)
}
#endif
inline void Account::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Account.address)
}
inline void Account::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Account.address)
}
inline ::std::string* Account::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Account.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_address() {
  // @@protoc_insertion_point(field_release:corepb.Account.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:corepb.Account.address)
}

// bytes balance = 2;
inline void Account::clear_balance() {
  balance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::balance() const {
  // @@protoc_insertion_point(field_get:corepb.Account.balance)
  return balance_.GetNoArena();
}
inline void Account::set_balance(const ::std::string& value) {
  
  balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Account.balance)
}
#if LANG_CXX11
inline void Account::set_balance(::std::string&& value) {
  
  balance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Account.balance)
}
#endif
inline void Account::set_balance(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Account.balance)
}
inline void Account::set_balance(const void* value, size_t size) {
  
  balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Account.balance)
}
inline ::std::string* Account::mutable_balance() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Account.balance)
  return balance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_balance() {
  // @@protoc_insertion_point(field_release:corepb.Account.balance)
  
  return balance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_balance(::std::string* balance) {
  if (balance != NULL) {
    
  } else {
    
  }
  balance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), balance);
  // @@protoc_insertion_point(field_set_allocated:corepb.Account.balance)
}

// uint64 nonce = 3;
inline void Account::clear_nonce() {
  nonce_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Account::nonce() const {
  // @@protoc_insertion_point(field_get:corepb.Account.nonce)
  return nonce_;
}
inline void Account::set_nonce(::google::protobuf::uint64 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:corepb.Account.nonce)
}

// bytes vars_hash = 4;
inline void Account::clear_vars_hash() {
  vars_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::vars_hash() const {
  // @@protoc_insertion_point(field_get:corepb.Account.vars_hash)
  return vars_hash_.GetNoArena();
}
inline void Account::set_vars_hash(const ::std::string& value) {
  
  vars_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Account.vars_hash)
}
#if LANG_CXX11
inline void Account::set_vars_hash(::std::string&& value) {
  
  vars_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Account.vars_hash)
}
#endif
inline void Account::set_vars_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vars_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Account.vars_hash)
}
inline void Account::set_vars_hash(const void* value, size_t size) {
  
  vars_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Account.vars_hash)
}
inline ::std::string* Account::mutable_vars_hash() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Account.vars_hash)
  return vars_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_vars_hash() {
  // @@protoc_insertion_point(field_release:corepb.Account.vars_hash)
  
  return vars_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_vars_hash(::std::string* vars_hash) {
  if (vars_hash != NULL) {
    
  } else {
    
  }
  vars_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vars_hash);
  // @@protoc_insertion_point(field_set_allocated:corepb.Account.vars_hash)
}

// bytes birth_place = 5;
inline void Account::clear_birth_place() {
  birth_place_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::birth_place() const {
  // @@protoc_insertion_point(field_get:corepb.Account.birth_place)
  return birth_place_.GetNoArena();
}
inline void Account::set_birth_place(const ::std::string& value) {
  
  birth_place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Account.birth_place)
}
#if LANG_CXX11
inline void Account::set_birth_place(::std::string&& value) {
  
  birth_place_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Account.birth_place)
}
#endif
inline void Account::set_birth_place(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  birth_place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Account.birth_place)
}
inline void Account::set_birth_place(const void* value, size_t size) {
  
  birth_place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Account.birth_place)
}
inline ::std::string* Account::mutable_birth_place() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Account.birth_place)
  return birth_place_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_birth_place() {
  // @@protoc_insertion_point(field_release:corepb.Account.birth_place)
  
  return birth_place_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_birth_place(::std::string* birth_place) {
  if (birth_place != NULL) {
    
  } else {
    
  }
  birth_place_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), birth_place);
  // @@protoc_insertion_point(field_set_allocated:corepb.Account.birth_place)
}

// .corepb.ContractMeta contract_meta = 6;
inline bool Account::has_contract_meta() const {
  return this != internal_default_instance() && contract_meta_ != NULL;
}
inline void Account::clear_contract_meta() {
  if (GetArenaNoVirtual() == NULL && contract_meta_ != NULL) {
    delete contract_meta_;
  }
  contract_meta_ = NULL;
}
inline const ::corepb::ContractMeta& Account::_internal_contract_meta() const {
  return *contract_meta_;
}
inline const ::corepb::ContractMeta& Account::contract_meta() const {
  const ::corepb::ContractMeta* p = contract_meta_;
  // @@protoc_insertion_point(field_get:corepb.Account.contract_meta)
  return p != NULL ? *p : *reinterpret_cast<const ::corepb::ContractMeta*>(
      &::corepb::_ContractMeta_default_instance_);
}
inline ::corepb::ContractMeta* Account::release_contract_meta() {
  // @@protoc_insertion_point(field_release:corepb.Account.contract_meta)
  
  ::corepb::ContractMeta* temp = contract_meta_;
  contract_meta_ = NULL;
  return temp;
}
inline ::corepb::ContractMeta* Account::mutable_contract_meta() {
  
  if (contract_meta_ == NULL) {
    auto* p = CreateMaybeMessage<::corepb::ContractMeta>(GetArenaNoVirtual());
    contract_meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:corepb.Account.contract_meta)
  return contract_meta_;
}
inline void Account::set_allocated_contract_meta(::corepb::ContractMeta* contract_meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete contract_meta_;
  }
  if (contract_meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      contract_meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, contract_meta, submessage_arena);
    }
    
  } else {
    
  }
  contract_meta_ = contract_meta;
  // @@protoc_insertion_point(field_set_allocated:corepb.Account.contract_meta)
}

// -------------------------------------------------------------------

// ContractMeta

// string version = 1;
inline void ContractMeta::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContractMeta::version() const {
  // @@protoc_insertion_point(field_get:corepb.ContractMeta.version)
  return version_.GetNoArena();
}
inline void ContractMeta::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.ContractMeta.version)
}
#if LANG_CXX11
inline void ContractMeta::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.ContractMeta.version)
}
#endif
inline void ContractMeta::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.ContractMeta.version)
}
inline void ContractMeta::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.ContractMeta.version)
}
inline ::std::string* ContractMeta::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:corepb.ContractMeta.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContractMeta::release_version() {
  // @@protoc_insertion_point(field_release:corepb.ContractMeta.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContractMeta::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:corepb.ContractMeta.version)
}

// -------------------------------------------------------------------

// Data

// string type = 1;
inline void Data::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Data::type() const {
  // @@protoc_insertion_point(field_get:corepb.Data.type)
  return type_.GetNoArena();
}
inline void Data::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Data.type)
}
#if LANG_CXX11
inline void Data::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Data.type)
}
#endif
inline void Data::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Data.type)
}
inline void Data::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Data.type)
}
inline ::std::string* Data::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Data.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_type() {
  // @@protoc_insertion_point(field_release:corepb.Data.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:corepb.Data.type)
}

// bytes payload = 2;
inline void Data::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Data::payload() const {
  // @@protoc_insertion_point(field_get:corepb.Data.payload)
  return payload_.GetNoArena();
}
inline void Data::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Data.payload)
}
#if LANG_CXX11
inline void Data::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Data.payload)
}
#endif
inline void Data::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Data.payload)
}
inline void Data::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Data.payload)
}
inline ::std::string* Data::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Data.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_payload() {
  // @@protoc_insertion_point(field_release:corepb.Data.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:corepb.Data.payload)
}

// -------------------------------------------------------------------

// Transaction

// bytes hash = 1;
inline void Transaction::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::hash() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.hash)
  return hash_.GetNoArena();
}
inline void Transaction::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.hash)
}
#if LANG_CXX11
inline void Transaction::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.hash)
}
#endif
inline void Transaction::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.hash)
}
inline void Transaction::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.hash)
}
inline ::std::string* Transaction::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_hash() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.hash)
}

// bytes from = 2;
inline void Transaction::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::from() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.from)
  return from_.GetNoArena();
}
inline void Transaction::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.from)
}
#if LANG_CXX11
inline void Transaction::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.from)
}
#endif
inline void Transaction::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.from)
}
inline void Transaction::set_from(const void* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.from)
}
inline ::std::string* Transaction::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_from() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.from)
}

// bytes to = 3;
inline void Transaction::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::to() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.to)
  return to_.GetNoArena();
}
inline void Transaction::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.to)
}
#if LANG_CXX11
inline void Transaction::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.to)
}
#endif
inline void Transaction::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.to)
}
inline void Transaction::set_to(const void* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.to)
}
inline ::std::string* Transaction::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_to() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.to)
}

// bytes value = 4;
inline void Transaction::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::value() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.value)
  return value_.GetNoArena();
}
inline void Transaction::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.value)
}
#if LANG_CXX11
inline void Transaction::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.value)
}
#endif
inline void Transaction::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.value)
}
inline void Transaction::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.value)
}
inline ::std::string* Transaction::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_value() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.value)
}

// uint64 nonce = 5;
inline void Transaction::clear_nonce() {
  nonce_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Transaction::nonce() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.nonce)
  return nonce_;
}
inline void Transaction::set_nonce(::google::protobuf::uint64 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:corepb.Transaction.nonce)
}

// int64 timestamp = 6;
inline void Transaction::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Transaction::timestamp() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.timestamp)
  return timestamp_;
}
inline void Transaction::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:corepb.Transaction.timestamp)
}

// .corepb.Data data = 7;
inline bool Transaction::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void Transaction::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
inline const ::corepb::Data& Transaction::_internal_data() const {
  return *data_;
}
inline const ::corepb::Data& Transaction::data() const {
  const ::corepb::Data* p = data_;
  // @@protoc_insertion_point(field_get:corepb.Transaction.data)
  return p != NULL ? *p : *reinterpret_cast<const ::corepb::Data*>(
      &::corepb::_Data_default_instance_);
}
inline ::corepb::Data* Transaction::release_data() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.data)
  
  ::corepb::Data* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::corepb::Data* Transaction::mutable_data() {
  
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::corepb::Data>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.data)
  return data_;
}
inline void Transaction::set_allocated_data(::corepb::Data* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.data)
}

// uint32 chain_id = 8;
inline void Transaction::clear_chain_id() {
  chain_id_ = 0u;
}
inline ::google::protobuf::uint32 Transaction::chain_id() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.chain_id)
  return chain_id_;
}
inline void Transaction::set_chain_id(::google::protobuf::uint32 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:corepb.Transaction.chain_id)
}

// bytes gas_price = 9;
inline void Transaction::clear_gas_price() {
  gas_price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::gas_price() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.gas_price)
  return gas_price_.GetNoArena();
}
inline void Transaction::set_gas_price(const ::std::string& value) {
  
  gas_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.gas_price)
}
#if LANG_CXX11
inline void Transaction::set_gas_price(::std::string&& value) {
  
  gas_price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.gas_price)
}
#endif
inline void Transaction::set_gas_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gas_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.gas_price)
}
inline void Transaction::set_gas_price(const void* value, size_t size) {
  
  gas_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.gas_price)
}
inline ::std::string* Transaction::mutable_gas_price() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.gas_price)
  return gas_price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_gas_price() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.gas_price)
  
  return gas_price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_gas_price(::std::string* gas_price) {
  if (gas_price != NULL) {
    
  } else {
    
  }
  gas_price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gas_price);
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.gas_price)
}

// bytes gas_limit = 10;
inline void Transaction::clear_gas_limit() {
  gas_limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::gas_limit() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.gas_limit)
  return gas_limit_.GetNoArena();
}
inline void Transaction::set_gas_limit(const ::std::string& value) {
  
  gas_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.gas_limit)
}
#if LANG_CXX11
inline void Transaction::set_gas_limit(::std::string&& value) {
  
  gas_limit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.gas_limit)
}
#endif
inline void Transaction::set_gas_limit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gas_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.gas_limit)
}
inline void Transaction::set_gas_limit(const void* value, size_t size) {
  
  gas_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.gas_limit)
}
inline ::std::string* Transaction::mutable_gas_limit() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.gas_limit)
  return gas_limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_gas_limit() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.gas_limit)
  
  return gas_limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_gas_limit(::std::string* gas_limit) {
  if (gas_limit != NULL) {
    
  } else {
    
  }
  gas_limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gas_limit);
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.gas_limit)
}

// uint32 alg = 11;
inline void Transaction::clear_alg() {
  alg_ = 0u;
}
inline ::google::protobuf::uint32 Transaction::alg() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.alg)
  return alg_;
}
inline void Transaction::set_alg(::google::protobuf::uint32 value) {
  
  alg_ = value;
  // @@protoc_insertion_point(field_set:corepb.Transaction.alg)
}

// bytes sign = 12;
inline void Transaction::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::sign() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.sign)
  return sign_.GetNoArena();
}
inline void Transaction::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.sign)
}
#if LANG_CXX11
inline void Transaction::set_sign(::std::string&& value) {
  
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.sign)
}
#endif
inline void Transaction::set_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.sign)
}
inline void Transaction::set_sign(const void* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.sign)
}
inline ::std::string* Transaction::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_sign() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.sign)
}

// -------------------------------------------------------------------

// BlockHeader

// bytes hash = 1;
inline void BlockHeader::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockHeader::hash() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.hash)
  return hash_.GetNoArena();
}
inline void BlockHeader::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.hash)
}
#if LANG_CXX11
inline void BlockHeader::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.BlockHeader.hash)
}
#endif
inline void BlockHeader::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.BlockHeader.hash)
}
inline void BlockHeader::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.BlockHeader.hash)
}
inline ::std::string* BlockHeader::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_hash() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.hash)
}

// bytes parent_hash = 2;
inline void BlockHeader::clear_parent_hash() {
  parent_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockHeader::parent_hash() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.parent_hash)
  return parent_hash_.GetNoArena();
}
inline void BlockHeader::set_parent_hash(const ::std::string& value) {
  
  parent_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.parent_hash)
}
#if LANG_CXX11
inline void BlockHeader::set_parent_hash(::std::string&& value) {
  
  parent_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.BlockHeader.parent_hash)
}
#endif
inline void BlockHeader::set_parent_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.BlockHeader.parent_hash)
}
inline void BlockHeader::set_parent_hash(const void* value, size_t size) {
  
  parent_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.BlockHeader.parent_hash)
}
inline ::std::string* BlockHeader::mutable_parent_hash() {
  
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.parent_hash)
  return parent_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_parent_hash() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.parent_hash)
  
  return parent_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_parent_hash(::std::string* parent_hash) {
  if (parent_hash != NULL) {
    
  } else {
    
  }
  parent_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_hash);
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.parent_hash)
}

// bytes coinbase = 4;
inline void BlockHeader::clear_coinbase() {
  coinbase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockHeader::coinbase() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.coinbase)
  return coinbase_.GetNoArena();
}
inline void BlockHeader::set_coinbase(const ::std::string& value) {
  
  coinbase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.coinbase)
}
#if LANG_CXX11
inline void BlockHeader::set_coinbase(::std::string&& value) {
  
  coinbase_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.BlockHeader.coinbase)
}
#endif
inline void BlockHeader::set_coinbase(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  coinbase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.BlockHeader.coinbase)
}
inline void BlockHeader::set_coinbase(const void* value, size_t size) {
  
  coinbase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.BlockHeader.coinbase)
}
inline ::std::string* BlockHeader::mutable_coinbase() {
  
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.coinbase)
  return coinbase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_coinbase() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.coinbase)
  
  return coinbase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_coinbase(::std::string* coinbase) {
  if (coinbase != NULL) {
    
  } else {
    
  }
  coinbase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coinbase);
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.coinbase)
}

// int64 timestamp = 5;
inline void BlockHeader::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BlockHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.timestamp)
  return timestamp_;
}
inline void BlockHeader::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.timestamp)
}

// uint32 chain_id = 6;
inline void BlockHeader::clear_chain_id() {
  chain_id_ = 0u;
}
inline ::google::protobuf::uint32 BlockHeader::chain_id() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.chain_id)
  return chain_id_;
}
inline void BlockHeader::set_chain_id(::google::protobuf::uint32 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.chain_id)
}

// uint32 alg = 7;
inline void BlockHeader::clear_alg() {
  alg_ = 0u;
}
inline ::google::protobuf::uint32 BlockHeader::alg() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.alg)
  return alg_;
}
inline void BlockHeader::set_alg(::google::protobuf::uint32 value) {
  
  alg_ = value;
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.alg)
}

// bytes sign = 8;
inline void BlockHeader::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockHeader::sign() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.sign)
  return sign_.GetNoArena();
}
inline void BlockHeader::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.sign)
}
#if LANG_CXX11
inline void BlockHeader::set_sign(::std::string&& value) {
  
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.BlockHeader.sign)
}
#endif
inline void BlockHeader::set_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.BlockHeader.sign)
}
inline void BlockHeader::set_sign(const void* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.BlockHeader.sign)
}
inline ::std::string* BlockHeader::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_sign() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.sign)
}

// bytes state_root = 9;
inline void BlockHeader::clear_state_root() {
  state_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockHeader::state_root() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.state_root)
  return state_root_.GetNoArena();
}
inline void BlockHeader::set_state_root(const ::std::string& value) {
  
  state_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.state_root)
}
#if LANG_CXX11
inline void BlockHeader::set_state_root(::std::string&& value) {
  
  state_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.BlockHeader.state_root)
}
#endif
inline void BlockHeader::set_state_root(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.BlockHeader.state_root)
}
inline void BlockHeader::set_state_root(const void* value, size_t size) {
  
  state_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.BlockHeader.state_root)
}
inline ::std::string* BlockHeader::mutable_state_root() {
  
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.state_root)
  return state_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_state_root() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.state_root)
  
  return state_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_state_root(::std::string* state_root) {
  if (state_root != NULL) {
    
  } else {
    
  }
  state_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state_root);
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.state_root)
}

// bytes txs_root = 10;
inline void BlockHeader::clear_txs_root() {
  txs_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockHeader::txs_root() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.txs_root)
  return txs_root_.GetNoArena();
}
inline void BlockHeader::set_txs_root(const ::std::string& value) {
  
  txs_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.txs_root)
}
#if LANG_CXX11
inline void BlockHeader::set_txs_root(::std::string&& value) {
  
  txs_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.BlockHeader.txs_root)
}
#endif
inline void BlockHeader::set_txs_root(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txs_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.BlockHeader.txs_root)
}
inline void BlockHeader::set_txs_root(const void* value, size_t size) {
  
  txs_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.BlockHeader.txs_root)
}
inline ::std::string* BlockHeader::mutable_txs_root() {
  
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.txs_root)
  return txs_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_txs_root() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.txs_root)
  
  return txs_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_txs_root(::std::string* txs_root) {
  if (txs_root != NULL) {
    
  } else {
    
  }
  txs_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txs_root);
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.txs_root)
}

// bytes events_root = 11;
inline void BlockHeader::clear_events_root() {
  events_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockHeader::events_root() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.events_root)
  return events_root_.GetNoArena();
}
inline void BlockHeader::set_events_root(const ::std::string& value) {
  
  events_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.events_root)
}
#if LANG_CXX11
inline void BlockHeader::set_events_root(::std::string&& value) {
  
  events_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.BlockHeader.events_root)
}
#endif
inline void BlockHeader::set_events_root(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  events_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.BlockHeader.events_root)
}
inline void BlockHeader::set_events_root(const void* value, size_t size) {
  
  events_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.BlockHeader.events_root)
}
inline ::std::string* BlockHeader::mutable_events_root() {
  
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.events_root)
  return events_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_events_root() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.events_root)
  
  return events_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_events_root(::std::string* events_root) {
  if (events_root != NULL) {
    
  } else {
    
  }
  events_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), events_root);
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.events_root)
}

// .consensuspb.ConsensusRoot consensus_root = 12;
inline bool BlockHeader::has_consensus_root() const {
  return this != internal_default_instance() && consensus_root_ != NULL;
}
inline const ::consensuspb::ConsensusRoot& BlockHeader::_internal_consensus_root() const {
  return *consensus_root_;
}
inline const ::consensuspb::ConsensusRoot& BlockHeader::consensus_root() const {
  const ::consensuspb::ConsensusRoot* p = consensus_root_;
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.consensus_root)
  return p != NULL ? *p : *reinterpret_cast<const ::consensuspb::ConsensusRoot*>(
      &::consensuspb::_ConsensusRoot_default_instance_);
}
inline ::consensuspb::ConsensusRoot* BlockHeader::release_consensus_root() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.consensus_root)
  
  ::consensuspb::ConsensusRoot* temp = consensus_root_;
  consensus_root_ = NULL;
  return temp;
}
inline ::consensuspb::ConsensusRoot* BlockHeader::mutable_consensus_root() {
  
  if (consensus_root_ == NULL) {
    auto* p = CreateMaybeMessage<::consensuspb::ConsensusRoot>(GetArenaNoVirtual());
    consensus_root_ = p;
  }
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.consensus_root)
  return consensus_root_;
}
inline void BlockHeader::set_allocated_consensus_root(::consensuspb::ConsensusRoot* consensus_root) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(consensus_root_);
  }
  if (consensus_root) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      consensus_root = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, consensus_root, submessage_arena);
    }
    
  } else {
    
  }
  consensus_root_ = consensus_root;
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.consensus_root)
}

// .corepb.Random random = 13;
inline bool BlockHeader::has_random() const {
  return this != internal_default_instance() && random_ != NULL;
}
inline void BlockHeader::clear_random() {
  if (GetArenaNoVirtual() == NULL && random_ != NULL) {
    delete random_;
  }
  random_ = NULL;
}
inline const ::corepb::Random& BlockHeader::_internal_random() const {
  return *random_;
}
inline const ::corepb::Random& BlockHeader::random() const {
  const ::corepb::Random* p = random_;
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.random)
  return p != NULL ? *p : *reinterpret_cast<const ::corepb::Random*>(
      &::corepb::_Random_default_instance_);
}
inline ::corepb::Random* BlockHeader::release_random() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.random)
  
  ::corepb::Random* temp = random_;
  random_ = NULL;
  return temp;
}
inline ::corepb::Random* BlockHeader::mutable_random() {
  
  if (random_ == NULL) {
    auto* p = CreateMaybeMessage<::corepb::Random>(GetArenaNoVirtual());
    random_ = p;
  }
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.random)
  return random_;
}
inline void BlockHeader::set_allocated_random(::corepb::Random* random) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete random_;
  }
  if (random) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      random = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, random, submessage_arena);
    }
    
  } else {
    
  }
  random_ = random;
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.random)
}

// -------------------------------------------------------------------

// Block

// .corepb.BlockHeader header = 1;
inline bool Block::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void Block::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::corepb::BlockHeader& Block::_internal_header() const {
  return *header_;
}
inline const ::corepb::BlockHeader& Block::header() const {
  const ::corepb::BlockHeader* p = header_;
  // @@protoc_insertion_point(field_get:corepb.Block.header)
  return p != NULL ? *p : *reinterpret_cast<const ::corepb::BlockHeader*>(
      &::corepb::_BlockHeader_default_instance_);
}
inline ::corepb::BlockHeader* Block::release_header() {
  // @@protoc_insertion_point(field_release:corepb.Block.header)
  
  ::corepb::BlockHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::corepb::BlockHeader* Block::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::corepb::BlockHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:corepb.Block.header)
  return header_;
}
inline void Block::set_allocated_header(::corepb::BlockHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:corepb.Block.header)
}

// repeated .corepb.Transaction transactions = 2;
inline int Block::transactions_size() const {
  return transactions_.size();
}
inline void Block::clear_transactions() {
  transactions_.Clear();
}
inline ::corepb::Transaction* Block::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:corepb.Block.transactions)
  return transactions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::corepb::Transaction >*
Block::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:corepb.Block.transactions)
  return &transactions_;
}
inline const ::corepb::Transaction& Block::transactions(int index) const {
  // @@protoc_insertion_point(field_get:corepb.Block.transactions)
  return transactions_.Get(index);
}
inline ::corepb::Transaction* Block::add_transactions() {
  // @@protoc_insertion_point(field_add:corepb.Block.transactions)
  return transactions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::corepb::Transaction >&
Block::transactions() const {
  // @@protoc_insertion_point(field_list:corepb.Block.transactions)
  return transactions_;
}

// .dagpb.Dag dependency = 3;
inline bool Block::has_dependency() const {
  return this != internal_default_instance() && dependency_ != NULL;
}
inline const ::dagpb::Dag& Block::_internal_dependency() const {
  return *dependency_;
}
inline const ::dagpb::Dag& Block::dependency() const {
  const ::dagpb::Dag* p = dependency_;
  // @@protoc_insertion_point(field_get:corepb.Block.dependency)
  return p != NULL ? *p : *reinterpret_cast<const ::dagpb::Dag*>(
      &::dagpb::_Dag_default_instance_);
}
inline ::dagpb::Dag* Block::release_dependency() {
  // @@protoc_insertion_point(field_release:corepb.Block.dependency)
  
  ::dagpb::Dag* temp = dependency_;
  dependency_ = NULL;
  return temp;
}
inline ::dagpb::Dag* Block::mutable_dependency() {
  
  if (dependency_ == NULL) {
    auto* p = CreateMaybeMessage<::dagpb::Dag>(GetArenaNoVirtual());
    dependency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:corepb.Block.dependency)
  return dependency_;
}
inline void Block::set_allocated_dependency(::dagpb::Dag* dependency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dependency_);
  }
  if (dependency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dependency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dependency, submessage_arena);
    }
    
  } else {
    
  }
  dependency_ = dependency;
  // @@protoc_insertion_point(field_set_allocated:corepb.Block.dependency)
}

// uint64 height = 4;
inline void Block::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Block::height() const {
  // @@protoc_insertion_point(field_get:corepb.Block.height)
  return height_;
}
inline void Block::set_height(::google::protobuf::uint64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:corepb.Block.height)
}

// -------------------------------------------------------------------

// NetBlocks

// string from = 1;
inline void NetBlocks::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetBlocks::from() const {
  // @@protoc_insertion_point(field_get:corepb.NetBlocks.from)
  return from_.GetNoArena();
}
inline void NetBlocks::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.NetBlocks.from)
}
#if LANG_CXX11
inline void NetBlocks::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.NetBlocks.from)
}
#endif
inline void NetBlocks::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.NetBlocks.from)
}
inline void NetBlocks::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.NetBlocks.from)
}
inline ::std::string* NetBlocks::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:corepb.NetBlocks.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetBlocks::release_from() {
  // @@protoc_insertion_point(field_release:corepb.NetBlocks.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetBlocks::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:corepb.NetBlocks.from)
}

// uint64 batch = 2;
inline void NetBlocks::clear_batch() {
  batch_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetBlocks::batch() const {
  // @@protoc_insertion_point(field_get:corepb.NetBlocks.batch)
  return batch_;
}
inline void NetBlocks::set_batch(::google::protobuf::uint64 value) {
  
  batch_ = value;
  // @@protoc_insertion_point(field_set:corepb.NetBlocks.batch)
}

// repeated .corepb.Block blocks = 3;
inline int NetBlocks::blocks_size() const {
  return blocks_.size();
}
inline void NetBlocks::clear_blocks() {
  blocks_.Clear();
}
inline ::corepb::Block* NetBlocks::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:corepb.NetBlocks.blocks)
  return blocks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::corepb::Block >*
NetBlocks::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:corepb.NetBlocks.blocks)
  return &blocks_;
}
inline const ::corepb::Block& NetBlocks::blocks(int index) const {
  // @@protoc_insertion_point(field_get:corepb.NetBlocks.blocks)
  return blocks_.Get(index);
}
inline ::corepb::Block* NetBlocks::add_blocks() {
  // @@protoc_insertion_point(field_add:corepb.NetBlocks.blocks)
  return blocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::corepb::Block >&
NetBlocks::blocks() const {
  // @@protoc_insertion_point(field_list:corepb.NetBlocks.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// NetBlock

// string from = 1;
inline void NetBlock::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetBlock::from() const {
  // @@protoc_insertion_point(field_get:corepb.NetBlock.from)
  return from_.GetNoArena();
}
inline void NetBlock::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.NetBlock.from)
}
#if LANG_CXX11
inline void NetBlock::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.NetBlock.from)
}
#endif
inline void NetBlock::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.NetBlock.from)
}
inline void NetBlock::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.NetBlock.from)
}
inline ::std::string* NetBlock::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:corepb.NetBlock.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetBlock::release_from() {
  // @@protoc_insertion_point(field_release:corepb.NetBlock.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetBlock::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:corepb.NetBlock.from)
}

// uint64 batch = 2;
inline void NetBlock::clear_batch() {
  batch_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetBlock::batch() const {
  // @@protoc_insertion_point(field_get:corepb.NetBlock.batch)
  return batch_;
}
inline void NetBlock::set_batch(::google::protobuf::uint64 value) {
  
  batch_ = value;
  // @@protoc_insertion_point(field_set:corepb.NetBlock.batch)
}

// .corepb.Block block = 3;
inline bool NetBlock::has_block() const {
  return this != internal_default_instance() && block_ != NULL;
}
inline void NetBlock::clear_block() {
  if (GetArenaNoVirtual() == NULL && block_ != NULL) {
    delete block_;
  }
  block_ = NULL;
}
inline const ::corepb::Block& NetBlock::_internal_block() const {
  return *block_;
}
inline const ::corepb::Block& NetBlock::block() const {
  const ::corepb::Block* p = block_;
  // @@protoc_insertion_point(field_get:corepb.NetBlock.block)
  return p != NULL ? *p : *reinterpret_cast<const ::corepb::Block*>(
      &::corepb::_Block_default_instance_);
}
inline ::corepb::Block* NetBlock::release_block() {
  // @@protoc_insertion_point(field_release:corepb.NetBlock.block)
  
  ::corepb::Block* temp = block_;
  block_ = NULL;
  return temp;
}
inline ::corepb::Block* NetBlock::mutable_block() {
  
  if (block_ == NULL) {
    auto* p = CreateMaybeMessage<::corepb::Block>(GetArenaNoVirtual());
    block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:corepb.NetBlock.block)
  return block_;
}
inline void NetBlock::set_allocated_block(::corepb::Block* block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete block_;
  }
  if (block) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:corepb.NetBlock.block)
}

// -------------------------------------------------------------------

// DownloadBlock

// bytes hash = 1;
inline void DownloadBlock::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DownloadBlock::hash() const {
  // @@protoc_insertion_point(field_get:corepb.DownloadBlock.hash)
  return hash_.GetNoArena();
}
inline void DownloadBlock::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.DownloadBlock.hash)
}
#if LANG_CXX11
inline void DownloadBlock::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.DownloadBlock.hash)
}
#endif
inline void DownloadBlock::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.DownloadBlock.hash)
}
inline void DownloadBlock::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.DownloadBlock.hash)
}
inline ::std::string* DownloadBlock::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:corepb.DownloadBlock.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DownloadBlock::release_hash() {
  // @@protoc_insertion_point(field_release:corepb.DownloadBlock.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DownloadBlock::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:corepb.DownloadBlock.hash)
}

// bytes sign = 2;
inline void DownloadBlock::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DownloadBlock::sign() const {
  // @@protoc_insertion_point(field_get:corepb.DownloadBlock.sign)
  return sign_.GetNoArena();
}
inline void DownloadBlock::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.DownloadBlock.sign)
}
#if LANG_CXX11
inline void DownloadBlock::set_sign(::std::string&& value) {
  
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.DownloadBlock.sign)
}
#endif
inline void DownloadBlock::set_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.DownloadBlock.sign)
}
inline void DownloadBlock::set_sign(const void* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.DownloadBlock.sign)
}
inline ::std::string* DownloadBlock::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:corepb.DownloadBlock.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DownloadBlock::release_sign() {
  // @@protoc_insertion_point(field_release:corepb.DownloadBlock.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DownloadBlock::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:corepb.DownloadBlock.sign)
}

// -------------------------------------------------------------------

// Random

// bytes vrf_seed = 1;
inline void Random::clear_vrf_seed() {
  vrf_seed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Random::vrf_seed() const {
  // @@protoc_insertion_point(field_get:corepb.Random.vrf_seed)
  return vrf_seed_.GetNoArena();
}
inline void Random::set_vrf_seed(const ::std::string& value) {
  
  vrf_seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Random.vrf_seed)
}
#if LANG_CXX11
inline void Random::set_vrf_seed(::std::string&& value) {
  
  vrf_seed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Random.vrf_seed)
}
#endif
inline void Random::set_vrf_seed(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vrf_seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Random.vrf_seed)
}
inline void Random::set_vrf_seed(const void* value, size_t size) {
  
  vrf_seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Random.vrf_seed)
}
inline ::std::string* Random::mutable_vrf_seed() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Random.vrf_seed)
  return vrf_seed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Random::release_vrf_seed() {
  // @@protoc_insertion_point(field_release:corepb.Random.vrf_seed)
  
  return vrf_seed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Random::set_allocated_vrf_seed(::std::string* vrf_seed) {
  if (vrf_seed != NULL) {
    
  } else {
    
  }
  vrf_seed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vrf_seed);
  // @@protoc_insertion_point(field_set_allocated:corepb.Random.vrf_seed)
}

// bytes vrf_proof = 2;
inline void Random::clear_vrf_proof() {
  vrf_proof_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Random::vrf_proof() const {
  // @@protoc_insertion_point(field_get:corepb.Random.vrf_proof)
  return vrf_proof_.GetNoArena();
}
inline void Random::set_vrf_proof(const ::std::string& value) {
  
  vrf_proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Random.vrf_proof)
}
#if LANG_CXX11
inline void Random::set_vrf_proof(::std::string&& value) {
  
  vrf_proof_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Random.vrf_proof)
}
#endif
inline void Random::set_vrf_proof(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vrf_proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Random.vrf_proof)
}
inline void Random::set_vrf_proof(const void* value, size_t size) {
  
  vrf_proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Random.vrf_proof)
}
inline ::std::string* Random::mutable_vrf_proof() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Random.vrf_proof)
  return vrf_proof_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Random::release_vrf_proof() {
  // @@protoc_insertion_point(field_release:corepb.Random.vrf_proof)
  
  return vrf_proof_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Random::set_allocated_vrf_proof(::std::string* vrf_proof) {
  if (vrf_proof != NULL) {
    
  } else {
    
  }
  vrf_proof_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vrf_proof);
  // @@protoc_insertion_point(field_set_allocated:corepb.Random.vrf_proof)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace corepb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_block_2eproto
